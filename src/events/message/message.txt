//Old code where you can find the way to use music functions without command handler.

const ytdl = require('ytdl-core-discord');
const ytsr = require('ytsr');
const ytpl = require('ytpl');
let ytlink;
const queue = new Map();
const musicVariables1 = new Map();
//Start message event
module.exports = async (bot, message) => { 
  if (message.author.bot) return;
  if (message.channel.type === 'dm') return;
  let PREFIX = 'g%';
  if (!message.content.startsWith(PREFIX)) return;
  let args = message.content.substring(PREFIX.length).split(/ +/);
  let serverQueue = queue.get(message.guild.id);
  let musicVariables = musicVariables1.get(message.guild.id);
  if (!musicVariables) {
  let something = {
  merror: 0,
  perror: 0,
  inp: 0,
  py: 0,
  memberVoted: []
  };
  musicVariables1.set(message.guild.id, something);
  musicVariables = musicVariables1.get(message.guild.id);
  }  
  }
  // Start looking for music commands.
        switch (args[0]) {
            case "play":
            if (message.channel.type === 'dm') return message.channel.send('This command only works on servers.')
                if (!args[1]) return message.channel.send('Please enter a YouTube link or search term.')
                const voiceChannel = message.member.voice.channel;
                if (!voiceChannel) return message.channel.send("You need to be in a voice channel to play music!");
            if (serverQueue) {
              if (serverQueue.voiceChannel.id !== voiceChannel.id) return message.channel.send('I\'m on another voice channel! I cannot be on two channels at the same time.')
            }
                const permissions = voiceChannel.permissionsFor(message.client.user);
                if (!permissions.has("CONNECT") || !permissions.has("SPEAK")) {
                    return message.channel.send("I need the permissions to join and speak in your voice channel!")
                } 
            if (musicVariables.inp == 1) return message.channel.send("I'm catching your playlist. Hang on!");

                if (ytdl.validateURL(args[1])) {
                    ytlink = args[1];
                    if (serverQueue) {
                        if (serverQueue.loop) {
                            serverQueue.loop = false;
                            message.channel.send("游대 The queue repeat has been disabled.");
                        }
                    }
                    message.channel.startTyping();
                    return handleVideo(message, voiceChannel)
                } else if (ytdl.validateID(args[1])) {
                    if (serverQueue) {
                        if (serverQueue.loop) {
                            serverQueue.loop = false;
                            message.channel.send("游대 The queue repeat has been disabled.");
                        }
                    }
                    ytlink = 'https://www.youtube.com/watch?v=' + args[1];
                    message.channel.startTyping();
                    return handleVideo(message, voiceChannel)
                } else if (ytpl.validateURL(args[1])) {
                    ytpl(args[1], async function (err, playlist) {
                        if (err) return message.reply(`I received an error in your playlist.`);
                        const videos = playlist.items;
                      try {
                        var form1 = await message.channel.send('Hang on! <:WaldenRead:665434370022178837>')
                      } catch (err) {
                        console.log(err);
                      }
                      message.channel.startTyping(playlist.items.length);
                        musicVariables.inp = 1;
                        if (serverQueue) {
                            if (serverQueue.loop) {
                                serverQueue.loop = false;
                                message.channel.send("游대 The queue repeat has been disabled.");
                            }
                        }
                        for (const video of Object.values(videos)) {
                            ytlink = video.url_simple;
                            await handleVideo(message, voiceChannel, true).catch(error =>
                                console.log(error));
                        }
                        if (musicVariables.inp == 1) {
                            musicVariables.inp = 0;
                            musicVariables.perror = 0;
                            message.channel.stopTyping(true);
                            message.channel.send(`Playlist: **${playlist.title}** has been added to the queue (${playlist.items.length} songs)!`).then(m => form1.delete());
                        } else {
                            musicVariables.inp = 0;
                            musicVariables.perror = 0;
                            message.channel.stopTyping(true);
                            message.channel.send('I couldn\'t queue your playlist.').then(m => form1.delete());
                        }
                    })
                } else {
                    let filter;
                    ytsr.getFilters(args.slice(1).join(" "), function (err, filters) {
                        if (err) return message.reply('I had an error when searching for that term. Try again.');
                        message.channel.startTyping();
                        filter = filters.get('Type').find(o => o.name === 'Video');
                        ytsr.getFilters(filter.ref, function (err, filters) {
                            if (err) {
                                message.channel.stopTyping(true);
                                return message.reply('I had an error when searching for that term. Try again.');
                            } 
                            filter = filters.get('Duration').find(o => o.name.startsWith('Short'));
                            var options = {
                                limit: 1,
                                nextpageRef: filter.ref,
                            }
                            ytsr(null, options, function (err, searchResults) {
                                if (err) { 
                                    message.channel.stopTyping(true);
                                    return message.reply(`I didn't find any video. Check your term and try again.`);
                                }
                                    if (serverQueue) {
                                    if (serverQueue.loop) {
                                        serverQueue.loop = false;
                                        message.channel.send("游대 The queue repeat has been disabled.");
                                    }
                                }
                                if (typeof searchResults === "undefined" && searchResults === null) {
                                    message.channel.stopTyping(true);
                                    return message.reply(`I didn't find any video. Check your term and try again.`);;
                                }
                                if (typeof searchResults.items[0] === "undefined" && searchResults.items[0] === null) {
                                    message.channel.stopTyping(true);
                                    return message.reply(`I didn't find any video. Check your term and try again.`);;
                                }
                                ytlink = searchResults.items[0].link;
                                return handleVideo(message, voiceChannel)
                            });
                        });
                    });

                }
                break;
            case 'skip':
            if (message.channel.type === 'dm') return message.channel.send('This command only works on servers.')
                if (!message.member.voice.channel) return message.channel.send("You need to be in a voice channel to skip music!");
                if (!serverQueue) return message.channel.send("There is nothing playing that I could skip.")
            if (serverQueue.voiceChannel.id !== message.member.voice.channel.id) return message.channel.send('I\'m on another voice channel!')
            if(!message.member.permissions.has('MANAGE_CHANNELS')){
              let memberRequired = Math.floor((message.member.voice.channel.members.size - 1) / 100 * 75)
              if (memberRequired > 1) {
                if (musicVariables.memberVoted.indexOf(message.author.id) === -1) {
                  musicVariables.memberVoted.push(message.author.id);
                  if (musicVariables.memberVoted.length <= memberRequired) {
                  return message.channel.send(`Skipping? (${musicVariables.memberVoted.length}/${memberRequired})`)
                }
                } else {
                  return message.channel.send('You have already voted!')
                }
              }
            }
                if (serverQueue.loop) {
                    serverQueue.loop = false;
                    message.channel.send('游대 The queue repeat has been disabled.');
                }
            musicVariables.memberVoted = [];
                serverQueue.connection.dispatcher.end();
                break;
            case 'stop':
            if (message.channel.type === 'dm') return message.channel.send('This command only works on servers.')
                if (!message.member.voice.channel) return message.channel.send("You need to be in a voice channel to stop music!");
                if (!serverQueue) return message.channel.send("There is nothing playing that I could stop.")
            if (serverQueue.voiceChannel.id !== message.member.voice.channel.id) return message.channel.send('I\'m on another voice channel!')
            if(!message.member.permissions.has('MANAGE_CHANNELS')){
              if (message.member.voice.channel.members.size > 2) {
                return message.channel.send('Only a member with permission to manage channels can stop queuing. Being alone also works.')
              }
            }
                serverQueue.songs = [];
                serverQueue.connection.dispatcher.end();
                break;
            case 'volume':
            if (message.channel.type === 'dm') return message.channel.send('This command only works on servers.')
                if (!message.member.voice.channel) return message.channel.send("You need to be in a voice channel to change the volume!");
                if (!serverQueue) return message.channel.send("There is nothing playing.")
            if (serverQueue.voiceChannel.id !== message.member.voice.channel.id) return message.channel.send('I\'m on another voice channel!')
                if (!args[1]) return message.channel.send(`The current volume is: ${serverQueue.volume}`)
                if (args[1] <= 5 && args[1] >= 0) {
                    serverQueue.volume = args[1];
                    serverQueue.connection.dispatcher.setVolumeLogarithmic(args[1] / 5);
                    return message.channel.send(`Volume set to ${args[1]}`)
                } else {
                    return message.channel.send("Invalid number. The allowed range is 0 to 5.");
                }
                break;
            case 'np':
            if (message.channel.type === 'dm') return message.channel.send('This command only works on servers.')
                if (!serverQueue) return message.channel.send("There is nothing playing.")
                return message.channel.send(`Now playing: **${serverQueue.songs[0].title}**`)
                break;
            case 'queue':
            if (message.channel.type === 'dm') return message.channel.send('This command only works on servers.')
                if (musicVariables.inp == 1) return message.channel.send("I'm catching your playlist. Hang on!");
                if (!serverQueue) return message.channel.send("There is nothing playing.")
                return message.channel.send(`**Song queue:**\n\n${serverQueue.songs.map(song => `**-** ${song.title}`).join(`\n`)}\n\n**Now playing:** ${serverQueue.songs[0].title}`, { split: true })
                    .catch(err =>
                        console.log(err)
                    );
                break;
            case 'loop':
            if (message.channel.type === 'dm') return message.channel.send('This command only works on servers.')
                if (!message.member.voice.channel) return message.channel.send("You need to be in a voice channel to loop the music!")
                if (!serverQueue) return message.channel.send('There is nothing playing.')
            if (serverQueue.voiceChannel.id !== message.member.voice.channel.id) return message.channel.send('I\'m on another voice channel!')
            
                if (musicVariables.inp == 1) return message.channel.send("I'm catching your playlist. Hang on!");

                if (!serverQueue.loop) {
                    serverQueue.loop = true;
                    return message.channel.send('游대 The queue repeat has been enabled.');
                } else {
                    serverQueue.loop = false;
                    return message.channel.send('游대 The queue repeat has been disabled.');
                }
                break;
            case 'pause':
            if (message.channel.type === 'dm') return message.channel.send('This command only works on servers.')
                if (!message.member.voice.channel) return message.channel.send("You have to be in a voice channel to pause the music!");
                if (!serverQueue) return message.channel.send("There is no song that I could pause!")
            if (serverQueue.voiceChannel.id !== message.member.voice.channel.id) return message.channel.send('I\'m on another voice channel!')
            if(!message.member.permissions.has('MANAGE_CHANNELS')){
              if (message.member.voice.channel.members.size > 2) {
                return message.channel.send('Only a member with permission to manage channels can pause the music. Being alone also works.')
              }
            }
                if (!serverQueue.playing) return message.channel.send(`I've already paused the music.`)
                serverQueue.playing = false;
                serverQueue.connection.dispatcher.pause(true);
                return message.channel.send(`**Paused!**`)
                break;

            case 'resume':
            if (message.channel.type === 'dm') return message.channel.send('This command only works on servers.')
                if (!message.member.voice.channel)
                    return message.channel.send(
                        "You have to be in a voice channel to resume the music!"
                    );
                if (!serverQueue)
                    return message.channel.send("There is no song that I could resume!");
            if (serverQueue.voiceChannel.id !== message.member.voice.channel.id) return message.channel.send('I\'m on another voice channel!')
                if (serverQueue.playing) return message.channel.send(`The music isn't paused.`)
            if(!message.member.permissions.has('MANAGE_CHANNELS')){
              if (message.member.voice.channel.members.size > 2) {
                return message.channel.send('Only a member with permission to manage channels can resume the music. Being alone also works.')
              }
            }
                serverQueue.playing = true;
                serverQueue.connection.dispatcher.resume();
                return message.channel.send('**Resuming!**')
                break;
        }
};
// Music functions.
async function handleVideo(message, voiceChannel, playlist = false) {
    const serverQueue = queue.get(message.guild.id);
  
    const musicVariables = musicVariables1.get(message.guild.id);

    const songInfo = await ytdl.getInfo(ytlink).catch(err => musicVariables.merror = 1);
    if (musicVariables.merror == 1) {
        musicVariables.merror = 0;
        if (playlist && musicVariables.perror == 0) {
            musicVariables.perror = 1;
            return message.reply(`I couldn't catch all the videos.`)
        } else if (!playlist) {
            return message.reply('something bad happened. Try again!')
        } else {
            return;
        }
    } else {
        const song = {
            title: songInfo.title,
            url: songInfo.video_url
        }
        if (!serverQueue) {
            const queueConstruct = {
                textChannel: message.channel,
                voiceChannel: voiceChannel,
                connection: null,
                songs: [],
                volume: 5,
                playing: true,
                loop: false
            }
            queue.set(message.guild.id, queueConstruct);

            queueConstruct.songs.push(song);

            try {
                var connection = await voiceChannel.join();
                queueConstruct.connection = connection;
                musicVariables.py = 1;
                play(message.guild, queueConstruct.songs[0], message.channel);

            } catch (error) {
                console.error(error);
                queue.delete(message.guild.id);
                return message.channel.send('I could not join the voice channel. Here\'s a debug: ' + error)
            }
        } else {
            serverQueue.songs.push(song);
            if (playlist) return;
            else {
                message.channel.stopTyping();
                return message.channel.send(`**${song.title}** has been added to the queue!`);
            }
        }
        return;
    }
}
async function play(guild, song, channel2) {
    const serverQueue = queue.get(guild.id);
  
    const musicVariables = musicVariables1.get(guild.id);

    const channel = channel2;

    if (!song) {
        channel.stopTyping();
        serverQueue.voiceChannel.leave();
        queue.delete(guild.id)
        musicVariables1.delete(guild.id)
        return;
    }

    const dispatcher = serverQueue.connection.play(await ytdl(song.url, { type: "audioonly", highWaterMark: 1 << 25 }), { type: 'opus' })
        .on("finish", () => {
          musicVariables.memberVoted = [];
            if (!serverQueue.loop) {
                serverQueue.songs.shift();
                play(guild, serverQueue.songs[0], channel);
            } else {
                serverQueue.songs.push(serverQueue.songs.shift());
                return play(guild, serverQueue.songs[0], channel);
            }
        })
        .on("error", err => {
          musicVariables.memberVoted = [];
            serverQueue.songs.shift();
            channel.send('There was a problem in ytdl-core while downloading the audio. Here\'s a debug: ' + err);
            return play(guild, serverQueue.songs[0], channel);
        });
    dispatcher.setVolumeLogarithmic(serverQueue.volume / 5);
    if (!serverQueue.loop) {
        serverQueue.textChannel.send(`<:JukeboxRobot:610310184484732959> Start playing: **${song.title}**`);
    }
    channel.stopTyping();
}